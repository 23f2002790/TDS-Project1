"""
LLM service using LangChain to generate static site files.
Supports switching between OpenAI and Anthropic providers.
"""
import os
import json
from typing import List, Dict
import logging
from langchain.chat_models import ChatOpenAI, ChatAnthropic
from langchain.schema import HumanMessage

logger = logging.getLogger(__name__)


def get_llm():
    """
    Returns appropriate LLM based on LLM_PROVIDER environment variable.
    Defaults to OpenAI if not specified.
    """
    provider = os.getenv("LLM_PROVIDER", "openai").lower()
    
    if provider == "anthropic":
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            raise ValueError("ANTHROPIC_API_KEY not set")
        logger.info("Using Anthropic Claude")
        return ChatAnthropic(
            anthropic_api_key=api_key,
            model_name="claude-3-5-sonnet-20241022"
        )
    else:
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY not set")
        logger.info("Using OpenAI GPT")
        return ChatOpenAI(
            openai_api_key=api_key,
            model_name="gpt-4o-mini",
            temperature=0.7
        )


async def generate_static_site(brief: str) -> List[Dict[str, str]]:
    """
    Uses LLM to generate a static site based on the brief.
    
    Args:
        brief: Description of the site to generate
        
    Returns:
        List of file dictionaries with 'path' and 'content' keys
    """
    llm = get_llm()
    
    # Simple prompt asking LLM to generate files
    prompt = f"""Generate a complete, minimal static single-page web application based on this brief:

{brief}

Return ONLY a valid JSON object with this exact structure:
{{
  "files": [
    {{"path": "index.html", "content": "...full HTML content..."}},
    {{"path": "script.js", "content": "...full JavaScript content..."}},
    {{"path": "styles.css", "content": "...full CSS content..."}},
    {{"path": "README.md", "content": "...project README..."}}
  ]
}}

Requirements:
- Create a complete, working single-page application
- Include index.html (main page), script.js (if needed), styles.css (for styling)
- Add a README.md explaining the project
- Make it visually appealing and fully functional
- Return ONLY the JSON, no other text

JSON:"""

    logger.info("Calling LLM to generate site...")
    
    # Call LLM
    message = HumanMessage(content=prompt)
    response = llm.invoke([message])
    
    # Parse response
    content = response.content.strip()
    
    # Try to extract JSON if wrapped in markdown code blocks
    if content.startswith("```"):
        # Remove markdown code blocks
        lines = content.split("\n")
        content = "\n".join(lines[1:-1]) if len(lines) > 2 else content
        content = content.replace("```json", "").replace("```", "").strip()
    
    try:
        result = json.loads(content)
        files = result.get("files", [])
        
        if not files:
            raise ValueError("No files generated by LLM")
        
        logger.info(f"Successfully generated {len(files)} files")
        return files
        
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse LLM response as JSON: {e}")
        logger.error(f"Response content: {content[:500]}")
        
        # Fallback: create minimal site
        logger.warning("Using fallback minimal site")
        return [
            {
                "path": "index.html",
                "content": f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Site</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Generated Static Site</h1>
        <p>{brief}</p>
    </div>
</body>
</html>"""
            },
            {
                "path": "styles.css",
                "content": """body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background: #f4f4f4;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}"""
            },
            {
                "path": "README.md",
                "content": f"""# Generated Static Site

## Brief
{brief}

## Files
- index.html - Main page
- styles.css - Styling

Auto-generated by AutoApp."""
            }
        ]